{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem Vindo a Documenta\u00e7\u00e3o do Projeto Sobre o Projeto Nosso projeto, que come\u00e7ou em 2019, consiste em construir em um carro el\u00e9trico movido a bateria, com sistemas el\u00e9tricos de alta efici\u00eancia. Para que nosso objetivo seja atingido, hoje somos divididos em 5 principais \u00e1reas: Software, Mec\u00e2nica , Controle, Eletr\u00f4nica e Adiministrativo, sempre visando a maior integra\u00e7\u00e3o entre \u00e1reas poss\u00edvel para que os membros possam aproveitar ao m\u00e1ximo a aprendizagem. Al\u00e9m disso, no primeiro semestre de 2020 foi implementado o conselho consultivo, formados por 5 ex-membros e nosso professor orientor, F\u00e1bio Hage, com o intuito de manter os valores, miss\u00f5es e objetivos do projeto a longo prazo e fornecer apoio \u00e0 lideran\u00e7a do Mileage. Layout da Documenta\u00e7\u00e3o Aqui voc\u00ea poder\u00e1 encontrar documenta\u00e7\u00f5es sobre: Backend App Dashboard","title":"Home"},{"location":"#bem-vindo-a-documentacao-do-projeto","text":"","title":"Bem Vindo a Documenta\u00e7\u00e3o do Projeto"},{"location":"#sobre-o-projeto","text":"Nosso projeto, que come\u00e7ou em 2019, consiste em construir em um carro el\u00e9trico movido a bateria, com sistemas el\u00e9tricos de alta efici\u00eancia. Para que nosso objetivo seja atingido, hoje somos divididos em 5 principais \u00e1reas: Software, Mec\u00e2nica , Controle, Eletr\u00f4nica e Adiministrativo, sempre visando a maior integra\u00e7\u00e3o entre \u00e1reas poss\u00edvel para que os membros possam aproveitar ao m\u00e1ximo a aprendizagem. Al\u00e9m disso, no primeiro semestre de 2020 foi implementado o conselho consultivo, formados por 5 ex-membros e nosso professor orientor, F\u00e1bio Hage, com o intuito de manter os valores, miss\u00f5es e objetivos do projeto a longo prazo e fornecer apoio \u00e0 lideran\u00e7a do Mileage.","title":"Sobre o Projeto"},{"location":"#layout-da-documentacao","text":"Aqui voc\u00ea poder\u00e1 encontrar documenta\u00e7\u00f5es sobre: Backend App Dashboard","title":"Layout da Documenta\u00e7\u00e3o"},{"location":"App/","text":"Sistema de Telemetria Reposit\u00f3rio : https://github.com/inspermileage/dashboard-pilot Sobre o Aplicativo Nosso aplicativo \u00e9 respons\u00e1vel por mostrar os dados mais importantes que o carro fornece para o piloto atrav\u00e9s de uma comunica\u00e7\u00e3o serial com o arduino. Al\u00e9m disso, ap\u00f3s recebermos esses dados, \u00e9 necess\u00e1rio realizar requisi\u00e7\u00f5es HTTP para poder armazen\u00e1-los e acess\u00e1-los no nosso banco de dados. Organiza\u00e7\u00e3o de Pastas Components: principais elementos que podem ser utilizados em v\u00e1rias p\u00e1ginas, como dropdown. Pages: Dividida em duas partes, a de cadastro gerais da corrida e a com a interface do piloto. Themes: cont\u00e9m um arquivo com as cores utilizadas no app. Functions: possui fun\u00e7\u00f5es interessantes para o projeto, junto com a conex\u00e3o do banco de dados (axios). assets: imagens importantes. Store: possui um gerenciador de states (Redux). O Redux Nosso app cont\u00e9m um gerenciador de states que funciona como um banco de dados local. Ele nos ajuda a guardar os id's do Car e Track, e Round cadastrados para que possamos realizar um post no banco de dados depois. Para isso, ele \u00e9 composto de 3 principais arquivos: Types.js: Onde podemos cadastrar os reducers, e, como temos que guardar informa\u00e7\u00f5es de tr\u00eas tabelas diferentes, criamos t\u00eas reducers. Actions.js: \u00c9 nele que configuramos as fun\u00e7\u00f5es respons\u00e1veis por \"settar\" a vari\u00e1vel no reducer. Detalhe: o payload \u00e9 o que voc\u00ea est\u00e1 passando como argumento, o que voc\u00ea quer que fique guardado, e o dispatch \u00e9 respons\u00e1vel por efetivamente guardar. Reducer.js: Colocamos todas as informa\u00e7\u00f5es iniciais e o que os reducers v\u00e3o conter. Al\u00e9m disso, foi feita uma fun\u00e7\u00e3o para registrar os reducers passando todo o estado inicial, mais os payloads recebidos. O Design Pensando em armazenar os dados de maneira correta, as primeiras p\u00e1ginas do projeto s\u00e3o destinadas para o cadastro do Carro, Pista, e Round: Enfim, temos a interface principal com o piloto: Depend\u00eancias Para realizar essa parte do projeto \u00e9 necess\u00e1rio instalar: Yarn Node.js Chocolatey (Windows) Homebrew (Mac) JDK 8 Android Studio Para ter todas as depend\u00eancias instaladas e configura\u00e7\u00f5es corretas, sugerimos seguir o link: https://react-native.rocketseat.dev/ , que possui um tutorial para os tr\u00eas tipos de sistemas operacionais (Windows, Mac e Linux). Executando yarn install react-native run-android","title":"App"},{"location":"App/#sistema-de-telemetria","text":"","title":"Sistema de Telemetria"},{"location":"App/#repositorio-httpsgithubcominspermileagedashboard-pilot","text":"","title":"Reposit\u00f3rio : https://github.com/inspermileage/dashboard-pilot"},{"location":"App/#sobre-o-aplicativo","text":"Nosso aplicativo \u00e9 respons\u00e1vel por mostrar os dados mais importantes que o carro fornece para o piloto atrav\u00e9s de uma comunica\u00e7\u00e3o serial com o arduino. Al\u00e9m disso, ap\u00f3s recebermos esses dados, \u00e9 necess\u00e1rio realizar requisi\u00e7\u00f5es HTTP para poder armazen\u00e1-los e acess\u00e1-los no nosso banco de dados.","title":"Sobre o Aplicativo"},{"location":"App/#organizacao-de-pastas","text":"Components: principais elementos que podem ser utilizados em v\u00e1rias p\u00e1ginas, como dropdown. Pages: Dividida em duas partes, a de cadastro gerais da corrida e a com a interface do piloto. Themes: cont\u00e9m um arquivo com as cores utilizadas no app. Functions: possui fun\u00e7\u00f5es interessantes para o projeto, junto com a conex\u00e3o do banco de dados (axios). assets: imagens importantes. Store: possui um gerenciador de states (Redux).","title":"Organiza\u00e7\u00e3o de Pastas"},{"location":"App/#o-redux","text":"Nosso app cont\u00e9m um gerenciador de states que funciona como um banco de dados local. Ele nos ajuda a guardar os id's do Car e Track, e Round cadastrados para que possamos realizar um post no banco de dados depois. Para isso, ele \u00e9 composto de 3 principais arquivos: Types.js: Onde podemos cadastrar os reducers, e, como temos que guardar informa\u00e7\u00f5es de tr\u00eas tabelas diferentes, criamos t\u00eas reducers. Actions.js: \u00c9 nele que configuramos as fun\u00e7\u00f5es respons\u00e1veis por \"settar\" a vari\u00e1vel no reducer. Detalhe: o payload \u00e9 o que voc\u00ea est\u00e1 passando como argumento, o que voc\u00ea quer que fique guardado, e o dispatch \u00e9 respons\u00e1vel por efetivamente guardar. Reducer.js: Colocamos todas as informa\u00e7\u00f5es iniciais e o que os reducers v\u00e3o conter. Al\u00e9m disso, foi feita uma fun\u00e7\u00e3o para registrar os reducers passando todo o estado inicial, mais os payloads recebidos.","title":"O Redux"},{"location":"App/#o-design","text":"Pensando em armazenar os dados de maneira correta, as primeiras p\u00e1ginas do projeto s\u00e3o destinadas para o cadastro do Carro, Pista, e Round: Enfim, temos a interface principal com o piloto:","title":"O Design"},{"location":"App/#dependencias","text":"Para realizar essa parte do projeto \u00e9 necess\u00e1rio instalar: Yarn Node.js Chocolatey (Windows) Homebrew (Mac) JDK 8 Android Studio Para ter todas as depend\u00eancias instaladas e configura\u00e7\u00f5es corretas, sugerimos seguir o link: https://react-native.rocketseat.dev/ , que possui um tutorial para os tr\u00eas tipos de sistemas operacionais (Windows, Mac e Linux).","title":"Depend\u00eancias"},{"location":"App/#executando","text":"yarn install react-native run-android","title":"Executando"},{"location":"Backend/","text":"Backend do carro Reposit\u00f3rio : https://github.com/inspermileage/backend Sobre o Backend Nosso Backend \u00e9 respons\u00e1vel por armazenar todos os dados que s\u00e3o enviados do arduino para o nosso App . Esses dados ser\u00e3o a base para a nossa Dashboard para a equipe, podendo analisar o desempenho do carro durante a corrida e realizar an\u00e1lises de melhorias e procuras de falhas no ve\u00edculo. Organiza\u00e7\u00e3o de Pastas schemas: cont\u00e9m os argumentos de entrada e saida (response models) das tabelas em cada rota. models: determina o tipo e o nome de cada tabela crud: segundo sua sigla, o crud \u00e9 respons\u00e1vel pela: Create (Cria\u00e7\u00e3o), Read (Consulta), Update (Atualiza\u00e7\u00e3o) e Delete (Destrui\u00e7\u00e3o) de cada linha das tabelas. api: cria as rotas de cada tabela e 'linka' ela \u00e0 uma fun\u00e7\u00e3o do crud. core: configura a url do database (antigamente PostgreSQL, mas agora n\u00e3o est\u00e1 sendo utilizada pelo fato do Backend salvar no proprio Heroku). database: realiza a conex\u00e3o do database com o Backend. Tabelas car: informa\u00e7\u00f5es b\u00e1sicas do carro, como nome do carro, descri\u00e7\u00e3o e data de cria\u00e7\u00e3o track: informa\u00e7\u00f5es b\u00e1sicas sobre a pista, como nome da pista e descri\u00e7\u00e3o round: informa\u00e7\u00f5es sobre a corrida, como a data da corrida, raz\u00e3o (competi\u00e7\u00e3o, teste ou inspe\u00e7\u00e3o), al\u00e9m das Foreign Keys do carro e da pista, informando o carro que ir\u00e1 correr e em qual pista. telemetry: tabela respons\u00e1vel por armazenar os dados do carro, como (rpm, velocidade etc). Rotas da aplica\u00e7\u00e3o Com o servidor de FastAPI executando e conectado ao banco de dados, a documenta\u00e7\u00e3o das rotas \u00e9 apresentada em: localhost:8000/docs. A rota base da API \u00e9 dada por localhost:8000/api/. Testes Os testes de unidade presentes na pasta /teste podem ser verificados pelo seguinte comando: pipenv run pytest Depend\u00eancias Para realizar essa parte do projeto \u00e9 necess\u00e1rio instalar: Obrigat\u00f3rios: Python 3.6 (ou superior) , pipenv ( pip install pipenv ) e Opcionais: Docker , Docker Compose e PostgreSQL Executando Ambiente virtual Ap\u00f3s instalar os requerimentos obrigat\u00f3rios, \u00e9 necess\u00e1rio instalar as depend\u00eancias do projeto. Para isso execute, no terminal, na pasta ./backend , onde se encontra o arquivo Pipfile , o seguinte comando: - pipenv install --dev Para utilizar este ambiente, \u00e9 preciso ativ\u00e1-lo executando o comando: - pipenv shell Ativando pipenv run python main.py (Certifique-se que o ambiente virtual est\u00e1 sendo utilizado)","title":"Backend"},{"location":"Backend/#backend-do-carro","text":"","title":"Backend do carro"},{"location":"Backend/#repositorio-httpsgithubcominspermileagebackend","text":"","title":"Reposit\u00f3rio : https://github.com/inspermileage/backend"},{"location":"Backend/#sobre-o-backend","text":"Nosso Backend \u00e9 respons\u00e1vel por armazenar todos os dados que s\u00e3o enviados do arduino para o nosso App . Esses dados ser\u00e3o a base para a nossa Dashboard para a equipe, podendo analisar o desempenho do carro durante a corrida e realizar an\u00e1lises de melhorias e procuras de falhas no ve\u00edculo.","title":"Sobre o Backend"},{"location":"Backend/#organizacao-de-pastas","text":"schemas: cont\u00e9m os argumentos de entrada e saida (response models) das tabelas em cada rota. models: determina o tipo e o nome de cada tabela crud: segundo sua sigla, o crud \u00e9 respons\u00e1vel pela: Create (Cria\u00e7\u00e3o), Read (Consulta), Update (Atualiza\u00e7\u00e3o) e Delete (Destrui\u00e7\u00e3o) de cada linha das tabelas. api: cria as rotas de cada tabela e 'linka' ela \u00e0 uma fun\u00e7\u00e3o do crud. core: configura a url do database (antigamente PostgreSQL, mas agora n\u00e3o est\u00e1 sendo utilizada pelo fato do Backend salvar no proprio Heroku). database: realiza a conex\u00e3o do database com o Backend.","title":"Organiza\u00e7\u00e3o de Pastas"},{"location":"Backend/#tabelas","text":"car: informa\u00e7\u00f5es b\u00e1sicas do carro, como nome do carro, descri\u00e7\u00e3o e data de cria\u00e7\u00e3o track: informa\u00e7\u00f5es b\u00e1sicas sobre a pista, como nome da pista e descri\u00e7\u00e3o round: informa\u00e7\u00f5es sobre a corrida, como a data da corrida, raz\u00e3o (competi\u00e7\u00e3o, teste ou inspe\u00e7\u00e3o), al\u00e9m das Foreign Keys do carro e da pista, informando o carro que ir\u00e1 correr e em qual pista. telemetry: tabela respons\u00e1vel por armazenar os dados do carro, como (rpm, velocidade etc).","title":"Tabelas"},{"location":"Backend/#rotas-da-aplicacao","text":"Com o servidor de FastAPI executando e conectado ao banco de dados, a documenta\u00e7\u00e3o das rotas \u00e9 apresentada em: localhost:8000/docs. A rota base da API \u00e9 dada por localhost:8000/api/.","title":"Rotas da aplica\u00e7\u00e3o"},{"location":"Backend/#testes","text":"Os testes de unidade presentes na pasta /teste podem ser verificados pelo seguinte comando: pipenv run pytest","title":"Testes"},{"location":"Backend/#dependencias","text":"Para realizar essa parte do projeto \u00e9 necess\u00e1rio instalar: Obrigat\u00f3rios: Python 3.6 (ou superior) , pipenv ( pip install pipenv ) e Opcionais: Docker , Docker Compose e PostgreSQL","title":"Depend\u00eancias"},{"location":"Backend/#executando","text":"","title":"Executando"},{"location":"Backend/#ambiente-virtual","text":"Ap\u00f3s instalar os requerimentos obrigat\u00f3rios, \u00e9 necess\u00e1rio instalar as depend\u00eancias do projeto. Para isso execute, no terminal, na pasta ./backend , onde se encontra o arquivo Pipfile , o seguinte comando: - pipenv install --dev Para utilizar este ambiente, \u00e9 preciso ativ\u00e1-lo executando o comando: - pipenv shell","title":"Ambiente virtual"},{"location":"Backend/#ativando","text":"pipenv run python main.py (Certifique-se que o ambiente virtual est\u00e1 sendo utilizado)","title":"Ativando"},{"location":"Site/","text":"Site do Mileage Reposit\u00f3rio : https://github.com/inspermileage/website Sobre o Site Nosso site tem o objetivo de informar sobre o Insper Mileage em geral: projeto, prot\u00f3tipos, equipe e parceiros. Al\u00e9m disso temos um blog para comentar sobre as tend\u00eancias e assuntos relacionados ao Mileage. O site foi desenvolvido utilizando o GatsbyJS e Bulma. Organiza\u00e7\u00e3o de Pastas Dentro da pasta src temos as seguintes pastas: components: onde est\u00e3o armazenados os componentes utilizados durante o c\u00f3digo para uma melhor organiza\u00e7\u00e3o images: onde est\u00e3o as imagens utilizadas no site pages: onde est\u00e3o de fato cada p\u00e1gina que comp\u00f5e o site templates: template base para integra\u00e7\u00e3o com o CMS do blog views: onde est\u00e3o as p\u00e1ginas gen\u00e9ricas Depend\u00eancias Para realizar essa parte do projeto \u00e9 necess\u00e1rio instalar: NodeJS Yarn Gatsby CLI Executando yarn install gatsby develop O site pode ser acessado em localhost:8000","title":"Site"},{"location":"Site/#site-do-mileage","text":"","title":"Site do Mileage"},{"location":"Site/#repositorio-httpsgithubcominspermileagewebsite","text":"","title":"Reposit\u00f3rio : https://github.com/inspermileage/website"},{"location":"Site/#sobre-o-site","text":"Nosso site tem o objetivo de informar sobre o Insper Mileage em geral: projeto, prot\u00f3tipos, equipe e parceiros. Al\u00e9m disso temos um blog para comentar sobre as tend\u00eancias e assuntos relacionados ao Mileage. O site foi desenvolvido utilizando o GatsbyJS e Bulma.","title":"Sobre o Site"},{"location":"Site/#organizacao-de-pastas","text":"Dentro da pasta src temos as seguintes pastas: components: onde est\u00e3o armazenados os componentes utilizados durante o c\u00f3digo para uma melhor organiza\u00e7\u00e3o images: onde est\u00e3o as imagens utilizadas no site pages: onde est\u00e3o de fato cada p\u00e1gina que comp\u00f5e o site templates: template base para integra\u00e7\u00e3o com o CMS do blog views: onde est\u00e3o as p\u00e1ginas gen\u00e9ricas","title":"Organiza\u00e7\u00e3o de Pastas"},{"location":"Site/#dependencias","text":"Para realizar essa parte do projeto \u00e9 necess\u00e1rio instalar: NodeJS Yarn Gatsby CLI","title":"Depend\u00eancias"},{"location":"Site/#executando","text":"yarn install gatsby develop O site pode ser acessado em localhost:8000","title":"Executando"}]}